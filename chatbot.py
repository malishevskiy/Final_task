import telebot
from telebot import types
from telebot.types import LabeledPrice, ShippingOption
import config
from collections import defaultdict
from datetime import time
import random
import sqlite3


reply_buttons = ['üî• –£—Å–ª—É–≥–∏', '‚òé –ó–∞—è–≤–∫–∞', 'üí° FAQ', 'üìù –ö–æ–º–ø–∞–Ω–∏—è',
                 'üë©‚Äç –°–ø—Ä–æ—Å–∏—Ç—å', 'ü•á –û—Ç–∑—ã–≤—ã', 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å']
from_lang = {'f_lang': ['–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å –Ω–µ–º–µ—Ü–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ',
                        '–ü–µ—Ä–µ–≤–æ–¥ —Å —è–ø–æ–Ω—Å–∫–æ–≥–æ'],
             'call_back': ['from_en',
                           'from_de',
                           'from_es',
                           'from_it',
                           'from_fr',
                           'from_zh',
                           'from_ja']}

to_lang = {'to_lang': ['–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π',
                       '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–ø–æ–Ω—Å–∫–∏–π'],
           'call_back': ['to_en',
                         'to_de',
                         'to_es',
                         'to_it',
                         'to_fr',
                         'to_zh',
                         'to_ja']}

review_list = {1: '–û—Ç–∑—ã–≤ 1',
               2: '–û—Ç–∑—ã–≤ 2',
               3: '–û—Ç–∑—ã–≤ 3'}

START, TITLE, LANGS, EMAIL, PHONE, FILE, CONFIRMATION, PAYMENT = range(8)
USER_STATE = defaultdict(lambda: START)
USER_REQUEST = defaultdict(lambda: {})

my_id = config.MY_ID

# @BotFather -> Bot Settings -> Payments
provider_token = config.PAYMENT_TOKEN
prices = [LabeledPrice(label='–ó–∞–∫–∞–∑ –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥', amount=5750),
          LabeledPrice('–í–µ—Ä—Å—Ç–∫–∞', 500)]
shipping_options = [
    ShippingOption(id='instant', title='–î–æ–ø. —É—Å–ª—É–≥–∏').add_price(LabeledPrice(
        '–í–µ—Ä—Å—Ç–∫–∞', 300)),
    ShippingOption(id='pickup', title='–î–æ–ø. —É—Å–ª—É–≥–∏').add_price(LabeledPrice(
        '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', 1000))]

# Loading of text data of company information
def textfile_load(filename):
    f = open(filename, 'r', encoding='UTF-8')
    text = f.read()
    f.close()
    return text


# Initiation of reply keyboard
def reply_keyboard(received_buttons):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(c) for c in received_buttons]
    keyboard.add(*buttons)
    return keyboard


# Initiation of inline keyboard
def inline_keyboard(received_buttons, callback):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=c, callback_data=cb)
               for c, cb in zip(received_buttons, callback)]
    keyboard.add(*buttons)
    return keyboard


# Initiation of multiline keyboard
def multiline_keyboard(received_buttons, callback):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for row_num in range(0, len(received_buttons[0])):
        buttons = [types.InlineKeyboardButton(
            text=received_buttons[0][row_num],
            callback_data=callback[0][row_num]),
            types.InlineKeyboardButton(
                text=received_buttons[1][row_num],
                callback_data=callback[1][row_num])]
        keyboard.add(*buttons)
    return keyboard


# Receipt of user state
def get_state(message):
    return USER_STATE[message.chat.id]


# Update of user state
def update_state(message, state):
    USER_STATE[message.chat.id] = state


# Update dict for database
def update_reqdict(user_id, key, value):
    USER_REQUEST[user_id][key] = value


# Receipt of dict for database
def get_reqdict(user_id):
    return USER_REQUEST[user_id]


# Saving and sending request data into database
# TITLE, LANGS, EMAIL, PHONE, FILE, CONFIRMATION
def save_data(message, data):
    if message:
        conn = sqlite3.connect('requests.db')
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS requests(
                   user_id INT PRIMARY KEY,
                   title TEXT,
                   langs TEXT,
                   user_email TEXT,
                   phone TEXT,
                   file_link TEXT);
                """)
        conn.commit()

        request_info = (data['user_id'],
                        data['title'],
                        data['langs'],
                        data['user_email'],
                        data['phone'],
                        data['file_link'])

        cur.execute("INSERT OR IGNORE INTO users VALUES(?, ?, ?, ?, ?, ?);",
                    request_info)
        conn.commit()
        cur.close()
    else:
        # conn = sqlite3.connect('requests.db')
        # cur = conn.cursor()
        # sql_delete_query = f"""DELETE from requests.db where user_id = {data['user_id']}"""
        # cur.execute(sql_delete_query)
        # conn.commit()
        # print('–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
        # cur.close()
        USER_REQUEST = {}


# Sending user info to a personal chat
def get_info_user(bot, message):
    bot.send_message(my_id, '–°–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å ' + ' '
                     + f'{message.chat.id}' + ' '
                     + f'{message.from_user.first_name}' + ' '
                     + f'{message.from_user.last_name}')


# Initiation of a chatbot
def run_bot():
    bot = telebot.TeleBot(config.TOKEN)

    @bot.message_handler(commands=['start'])
    def start_command(message, res=False):
        keyboard = reply_keyboard(reply_buttons)
        # Greeting
        bot.send_message(
            message.chat.id,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} '
            f'{message.from_user.last_name}! –Ø - –±–æ—Ç –†—É—Ç–µ–∫—Å—Ç. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤ '
            f'–Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.\n' + '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –Ω–∞–∂–∞–≤\n' +
            '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ\n' +
            '–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å.', reply_markup=keyboard)

    @bot.message_handler(commands=['help'])
    def help_command(message):
        keyboard = inline_keyboard(['–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º'],
                                   ['telegram.me/translator1986'])
        bot.send_message(message.chat.id,
                         '1) –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É. –ò–ª–∏\n' +
                         '2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –í–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.\n',
                         reply_markup=keyboard)

    # @bot.message_handler(content_types=['text'])
    @bot.message_handler(func=lambda message: get_state(message) == START)
    # @bot.message_handler(func=lambda message: message in reply_buttons)
    def text_handle(message):
        # About us
        if message.text == 'üìù –ö–æ–º–ø–∞–Ω–∏—è':
            keyboard = inline_keyboard(['–û –Ω–∞—Å', '–í–∞–∫–∞–Ω—Å–∏–∏'],
                                       ['about-us', 'vacancies'])
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
                             reply_markup=keyboard)
        # FAQ
        if message.text == 'üí° FAQ':
            bot.send_message(message.chat.id, textfile_load('faq'),
                             parse_mode='MarkdownV2')
        # Asking a manager
        if message.text == 'üë©‚Äç –°–ø—Ä–æ—Å–∏—Ç—å':
            bot.send_message(message.chat.id, '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '
                                              '–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å'
                                              ' –í–∞–º–∏.')
            get_info_user(bot, message)

        # A function for sending a notification to a manager
        # shall be added.
        # ---
        # Reviews
        if message.text == 'ü•á –û—Ç–∑—ã–≤—ã':
            keyboard = inline_keyboard(['–û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å', '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'],
                                       ['reviews', 'feedback'])
            bot.send_message(message.chat.id,
                             '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∑—ã–≤:',
                             reply_markup=keyboard)
        # Services
        if message.text == 'üî• –£—Å–ª—É–≥–∏':
            keyboard = multiline_keyboard([from_lang['f_lang'],
                                           to_lang['to_lang']],
                                          [from_lang['call_back'],
                                           to_lang['call_back']])
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –í–∞—Å '
                                              '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
                             reply_markup=keyboard)
        # Payment
        if message.text == 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä '
                                              '–í–∞—à–µ–π –∑–∞—è–≤–∫–∏:')
            update_state(message, PAYMENT)
        # Request
        if message.text == '‚òé –ó–∞—è–≤–∫–∞':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è '
                                              '–∏ —Ñ–∞–º–∏–ª–∏—é:')
            update_state(message, TITLE)

    # START, TITLE, LANGS, EMAIL, PHONE, FILE, CONFIRMATION
    @bot.message_handler(func=lambda message: get_state(message) == TITLE)
    def handle_name(message):
        if message.text not in reply_buttons:
            update_reqdict(message.chat.id, 'user_id', message.chat.id)
            update_reqdict(message.chat.id, 'title', message.text)
            bot.send_message(message.chat.id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ —è–∑—ã–∫, '
                             '–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:')
            update_state(message, LANGS)
        else:
            text_handle(message)

    @bot.message_handler(func=lambda message: get_state(message) == LANGS)
    def handle_lang(message):
        if message.text not in reply_buttons:
            update_reqdict(message.chat.id, 'langs', message.text)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à e-mail:')
            update_state(message, EMAIL)
        else:
            text_handle(message)

    @bot.message_handler(func=lambda message: get_state(message) == EMAIL)
    def handle_email(message):
        if message.text not in reply_buttons:
            update_reqdict(message.chat.id, 'user_email', message.text)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
            update_state(message, PHONE)
        else:
            text_handle(message)

    @bot.message_handler(func=lambda message: get_state(message) == PHONE)
    def handle_phone(message):
        if message.text not in reply_buttons:
            update_reqdict(message.chat.id, 'phone', message.text)
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª:')
            update_state(message, FILE)
        else:
            text_handle(message)

    @bot.message_handler(func=lambda message: get_state(message) == FILE)
    def handle_file(message):
        if message.text not in reply_buttons:
            update_reqdict(message.chat.id, 'file_link', message.text)
            keyboard = inline_keyboard(['–î–∞', '–ù–µ—Ç'],
                                       ['send_true', 'send_false'])
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?',
                             reply_markup=keyboard)
            update_state(message, START)
        else:
            text_handle(message)

        # Processing of inline buttons

    @bot.callback_query_handler(func=lambda call: True)
    def iq_callback(query):
        bot.answer_callback_query(query.id)
        send_message(query.message, query.data)

    def send_message(message, data):
        if data == 'about-us':
            bot.send_message(message.chat.id,
                             textfile_load('about_us'))
        if data == 'vacancies':
            bot.send_message(message.chat.id,
                             textfile_load('vacancies'))
        if data == 'from_en':
            bot.send_message(message.chat.id,
                             '–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ')
        if data == 'to_en':
            bot.send_message(message.chat.id,
                             '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π')
        if data == 'send_true':
            save_data(True, get_reqdict(message.chat.id))
            bot.send_message(message.chat.id,
                             f'–ù–æ–º–µ—Ä –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ {message.chat.id}. '
                             f'–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–µ.')
            update_state(message, START)
        if data == 'send_false':
            save_data(False, get_reqdict(message.chat.id))
            bot.send_message(message.chat.id,
                             '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.')
            update_state(message, START)
        if data == 'reviews':
            bot.send_message(message.chat.id,
                             f'–û –Ω–∞—Å –≥–æ–≤–æ—Ä—è—Ç —Å–ª–µ–¥—É—é—â–µ–µ: '
                             f'{random.choice(list(review_list.values()))}')
        if data == 'feedback':
            bot.send_message(message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! –û–Ω '
                                              '–ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.')
            # Create a function saving client's feedback in the database
            # ---

            # A function for calculating number of words in doc, exl and other
            # readable format files shall be added in the tab Request
            #

    @bot.message_handler(func=lambda message: get_state(message) == PAYMENT)
    def handle_name(message):
        if message.text not in reply_buttons:
            bot.send_message(message.chat.id,
                             f"–Ø –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ä—Ç—ã. –° –í–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ "
                             f"–Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã –¥–µ–Ω—å–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—É—é "
                             f"–∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç: 1111 1111 1111 "
                             f"1026, 12/22, CVC 000.\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: "
                             f"{message.chat.id}.\n–î–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π.",
                             parse_mode='Markdown')
            #
            # A function for extracting request data shall be realized
            #
            # Sending invoice
            bot.send_invoice(
                message.chat.id,  # chat_id
                '–ó–∞–∫–∞–∑ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥',  # title
                '–ó–∞–∫–∞–∑ –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—ä–µ–º–æ–º 10 —Å—Ç—Ä. —Å '
                '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {}',  # description
                '–ò–Ω–≤–æ–π—Å',  # invoice_payload
                provider_token,  # provider_token
                'rub',  # currency
                prices,  # prices
                start_parameter='order-example')
            update_state(message, START)
        else:
            text_handle(message)

    @bot.shipping_query_handler(func=lambda query: True)
    def shipping(shipping_query):
        print(shipping_query)
        bot.answer_shipping_query(shipping_query.id, ok=True,
                                  shipping_options=shipping_options,
                                  error_message='–û–π, –ø–æ—Ö–æ–∂–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ '
                                                '–ª–∏–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ '
                                                '–ø–æ–∑–¥–Ω–µ–µ!')

    @bot.pre_checkout_query_handler(func=lambda query: True)
    def checkout(pre_checkout_query):
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                      error_message="–ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ "
                                                    "–ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É–∫—Ä–∞—Å—Ç—å "
                                                    "CVV-–Ω–æ–º–µ—Ä –í–∞—à–µ–π –∫–∞—Ä—Ç—ã, "
                                                    "–Ω–æ –º—ã –∑–∞—â–∏—Ç–∏–ª–∏ –∏—Ö. "
                                                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,  "
                                                    "–ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ "
                                                    "–º–∏–Ω—É—Ç. Aliens tried to "
                                                    "steal your card's CVV, "
                                                    "but we successfully "
                                                    "protected your "
                                                    "credentials")

    @bot.message_handler(content_types=['successful_payment'])
    def got_payment(message):
        bot.send_message(message.chat.id,
                         '–£—Ä–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–ª–∞—Ç–µ–∂! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –í–∞—à –∑–∞–∫–∞–∑ –≤ '
                         '–±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. '
                         '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                         '"–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∑–∞–∫–∞–∑!'.format(
                             message.successful_payment.total_amount / 100,
                             message.successful_payment.currency),
                         parse_mode='Markdown')

    # Polling function
    while True:
        print('=^.^=')

        try:
            bot.polling(none_stop=True, interval=3, timeout=20)
            print('–≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å')
        except telebot.apihelper.ApiException:
            print('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑—å –∏ API')
            time.sleep(10)
        except Exception as e:
            print(e)
            time.sleep(60)


if __name__ == '__main__':
    run_bot()
